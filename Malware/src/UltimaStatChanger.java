import java.io.*;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Scanner;


public class UltimaStatChanger {

	public static void main(String[] args) throws IOException{
		int read;
		String padding = "";
		String hexData = "";
		String inventoryData = "";
		boolean extraPadRemoved = false;
		boolean userData = true;
		ArrayList<String> playerDataHex = new ArrayList<String>();
		RandomAccessFile gameData = new RandomAccessFile("SAVED.GAM", "rw");	

		//read SAVED.GAM data
		while((read = gameData.read()) != -1) {
			padding = Integer.toHexString(read);
			if (padding.length() != 2)
				padding = 0 + padding;
			hexData = hexData + padding;
			if(extraPadRemoved == false && hexData.length() == 4) {
				extraPadRemoved = true;
				hexData = "";
			}
			if (hexData.length() == 64) {
				if(hexData.contains("0000000000000000000000"))
					userData = false;
				if (userData == true)
					playerDataHex.add(hexData);
				else
					inventoryData = inventoryData + hexData;
				hexData = "";
			}  
		}	

		Scanner input = new Scanner(System.in);

		//Collect data from offsets and create objects to represent them
		Iterator<String> playerIterator = playerDataHex.iterator();
		System.out.println("\nLoading game data... \n");
		String gold = (String) inventoryData.subSequence(4, 8);
		String keys = (String) inventoryData.subSequence(8, 10);
		String gems = (String) inventoryData.subSequence(10, 12);
		String magicCarpets = (String) inventoryData.subSequence(16, 18);
		String skullKeys = (String) inventoryData.subSequence(18, 20);       
		String blackBadge = (String) inventoryData.subSequence(44, 46);
		String magicAxes = (String) inventoryData.subSequence(125, 126);
		Inventory inventory = new Inventory(gold,  keys,  gems,  magicCarpets,  skullKeys,  blackBadge,  magicAxes, inventoryData);
		System.out.println(inventory);
		
		int currentPlayer = -1;
		Player[] players = new Player[playerDataHex.size()];
		while(playerIterator.hasNext()) {
			String playerDataString = playerIterator.next();
			String name = (String) playerDataString.subSequence(0, 20);
			String str = (String) playerDataString.subSequence(24, 26);
			String intl = (String) playerDataString.subSequence(26, 28);
			String dex = (String) playerDataString.subSequence(28, 30);
			String hit = (String) playerDataString.subSequence(32, 36);
			String maxHit = (String) playerDataString.subSequence(36, 40);
			String exp = (String) playerDataString.subSequence(40, 44);
			currentPlayer++;
			players[currentPlayer] = new Player(name, str, intl, dex, hit, maxHit, exp, playerDataHex.get(currentPlayer));
			System.out.println("\n----- Player " + (currentPlayer + 1) + " -----\n" + players[currentPlayer] + "\n");

		}

		//Interface to edit data
		int menu = 0;
		while(menu != 4) {
			System.out.println("1. Max stats for all players");
			System.out.println("2. Change individual stats");
			System.out.println("3. Save changes to SAVED.GAM");
			System.out.println("4. Exit");
			menu = input.nextInt();
			if(menu == 1) {
				inventory.setBlackBadge(1);
				inventory.setGems(100);
				inventory.setGold(9999);
				inventory.setKeys(100);
				inventory.setMagicAxes(10);
				inventory.setMagicCarpets(2);
				inventory.setSkullKeys(100);

				System.out.println(inventory);
				
				for(int current = 0; current < players.length; current++) {
					players[current].setStrength(99);
					players[current].setIntelligence(99);
					players[current].setDexterity(99);
					players[current].setHP(999);
					players[current].setMaxHP(999);
					players[current].setEXP(9999);
					System.out.println( "\n----- Player " + (current+1) +  " -----\n" + players[current] + "\n");
				}
			}

			if(menu == 2) {
				System.out.println("\nSelect a player to edit: \n *Select 0 to edit inventory");
				int choice = input.nextInt();

				if (choice > 0) {
					System.out.println("\n----- Selected -----\n" +players[choice - 1]);
					System.out.println("\nSelect a stat to edit\n 1. Strength \n 2. Intelligence \n 3. Dexterity \n 4. HP \n 5. Max HP \n 6. Experience");
					int statSelection = input.nextInt();
					System.out.println("\nInput a value");
					int statValue = input.nextInt();
					if(statSelection == 1)
						players[choice -1].setStrength(statValue);
					else if(statSelection == 2)
						players[choice -1].setIntelligence(statValue);
					else if(statSelection == 3)
						players[choice -1].setDexterity(statValue);
					else if(statSelection == 4)
						players[choice -1].setHP(statValue);
					else if(statSelection == 5)
						players[choice -1].setMaxHP(statValue);
					else if(statSelection == 6)
						players[choice -1].setEXP(statValue);

					System.out.println(players[choice -1]);
				}
				else {
					System.out.println("\n----- Selected -----\n" +inventory);
					System.out.println("\nSelect an item to edit\n 1. Gold \n 2. Keys \n 3. Gems \n 4. Magic Carpets \n 5. Skull Keys \n 6. Black Badges \n 7. Magic Axes");
					int itemSelection = input.nextInt();
					System.out.println("\nInput a value");
					int itemValue = input.nextInt();
					if(itemSelection == 1)
						inventory.setGold(itemValue);
					else if(itemSelection == 2)
						inventory.setKeys(itemValue);
					else if(itemSelection == 3)
						inventory.setGems(itemValue);
					else if(itemSelection == 4)
						inventory.setMagicCarpets(itemValue);
					else if(itemSelection == 5)
						inventory.setSkullKeys(itemValue);
					else if(itemSelection == 6)
						inventory.setBlackBadge(itemValue);
					else if(itemSelection == 7)
						inventory.setMagicAxes(itemValue);
					System.out.println(inventory);
				}
			}
			if(menu == 3) {
				String generatedHex = "0000";
				for(int i = 0; i < playerDataHex.size(); i++)
					generatedHex = generatedHex + players[i].generateHex();
				generatedHex = generatedHex + inventory.generateHex();	
				byte[] data = new byte[generatedHex.length() / 2];
				for (int i = 0; i < generatedHex.length(); i += 2) {
					data[i / 2] = (byte) ((Character.digit(generatedHex.charAt(i), 16) << 4)
							+ Character.digit(generatedHex.charAt(i+1), 16));
				}
				gameData.setLength(0);
				gameData.write(data);			
				System.out.println("File has been overwritten with new stats.");
			}
			if(menu == 4) {
				input.close();
				gameData.close();
				break;
			}
		}

	}
}